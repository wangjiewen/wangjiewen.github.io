<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangJiewen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-18T15:49:30.314Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WangJiewen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android8.0——HIDL in C++</title>
    <link href="http://yoursite.com/2017/12/11/Hidl_in_C++/"/>
    <id>http://yoursite.com/2017/12/11/Hidl_in_C++/</id>
    <published>2017-12-10T16:00:00.000Z</published>
    <updated>2017-12-18T15:49:30.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>binder是Android中重要的进程间通信（IPC）方式。</p><p>在8.0之前，多进程间的通信底层广泛使用binder机制。其相关原理、demo网上已非常详尽，在此仅推荐几个相关的链接，见文末参考。</p><p>本篇文章将介绍Android 8.0中，关于binder新增内容的思想，具体代码分析及原理考虑后续另写一篇。最后会用C++实现一个demo，从开发者的角度来看看如何使用它。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="HIDL简介"><a href="#HIDL简介" class="headerlink" title="HIDL简介"></a>HIDL简介</h3><p>对于Android架构而言，8.0版本新增了一项元素是Project Treble，旨在分离framework和vendor，使得制造商更方便地将设备更新到新版的Android系统中，同时Google也收拢对Android版本的控制，以免制造商在Android架构中修改过多。</p><p>根据以上思想，Android 8.0中新增了HIDL（HAL接口定义语言）。制造商新增或更改框架的内容都被放置在<code>/vendor</code>分区中，通过HIDL与HAL层通信，构造编译HIDL，而无需重新构建编译HAL层的内容，做到framework与vendor的分离。官网有一张图介绍引入Treble后，HAL的发展历程，非常形象，如下：</p><img src="/2017/12/11/Hidl_in_C++/treble_cpp_legacy_hal_progression.png" alt="HAL发展历程" title="HAL发展历程"><p>HIDL的核心实现思想就是进程间通信binder化（binderized）。framework与HAL层通信，会由过去直接调用的形式，逐渐过渡为进程间通信的形式。为了方便过渡，C++的HIDL接口分为两种，一种是直通式（passthrough），一种是binder化，代码中巧妙的用参数来实现两种方式的复用，官方称之为“Binder化直通式HAL”，具体用法我们在实现模块中细说。</p><p>由于binder在Treble中有了新的用处，基于分离的设计目标，Google对于binder也做了分离。在过去，制造商进程都使用binder技术进行进程间通信。在Android 8.0中，<code>/dev/binder</code>设备节点成为框架进程的专属节点，意味着供应商无法再访问该节点。根据分离framework和vendor的思想，进程也分为framework进程和vendor进程，原来的binder节点，是framework进程与framework进程通信的节点，由此推出，还需要有framework进程和vendor进程通信的节点，vendor进程和vendor进程通信的节点。</p><p>Android 8.0就此将binder的IPC域划分成以下三个：</p><table><thead><tr><th>IPC 域</th><th>说明</th></tr></thead><tbody><tr><td><code>/dev/binder</code></td><td>框架/应用进程之间的 IPC，使用 AIDL 接口</td></tr><tr><td><code>/dev/hwbinder</code></td><td>框架/供应商进程之间的 IPC，使用 HIDL 接口。供应商进程之间的 IPC，使用 HIDL 接口</td></tr><tr><td><code>/dev/vndbinder</code></td><td>供应商/供应商进程之间的 IPC，使用 AIDL 接口</td></tr></tbody></table><p>根据表可以看到，新增的HIDL接口，就是使用的<code>/dev/hwbinder</code>的设备节点。我们将在下一小节，介绍hwbinder与binder在使用上的区别。</p><h3 id="HIDL使用"><a href="#HIDL使用" class="headerlink" title="HIDL使用"></a>HIDL使用</h3><p>就内部实现而言，HIDL的使用其实是原来binder使用的一种封装。原来binder的使用可以参考<a href="http://gityuan.com/2015/11/22/binder-use/" target="_blank" rel="external">这篇文章</a>。二者的核心思想都是C/S模型，如果你读了上面那篇前辈的博客，或是知道原来binder的使用，一定会忍不住吐槽Bp、Bn如果不是懂原理鬼知道是proxy和native所以只能强行记住client和server怎么与Bp和Bn对应的并且client端和server端的代码与接口代码混在一起乱七八糟的不分离不好找。</p><p>当然，我们这里要说的是HIDL，HIDL将原来binder的使用方式，用RPC（远程调用）的思想进行了封装。HIDL就是服务端的一部分，实现并提供接口给客户端，客户端远程调用服务端的方法便完成了通信。调用方法的参数是客户端传给服务端的内容，返回值是服务端传回客户端的内容。客户端调用，变成了简单的一句<code>service-&gt;function()</code>，不用write和transact，服务端也就简单的实现接口，不用再手动重写onTransact以及switch…case了。</p><p>要注意一点，客户端远程调用方法中，如果返回值是特殊类型，hidl会进行特殊处理，将不再在返回值处，而是作为参数，由函数指针传回。关于hidl的数据结构部分，在实现部分会具体说明。</p><p>对开发者而言，RPC的方式是非常方便理解使用的。但是如果要细究它的原理，其实和原来的binder一样，只是封装数据结构以及传送解析的代码，Android用hide-gen帮你自动生成了而已，而生成代码内部做的事情，比原来自己手动写的更复杂。</p><p>本篇文章是从开发使用的角度来说，HIDL的便利，我们到代码中去细细品味。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们将实现一个虐狗机（雾），服务端是一个傲娇的小姑娘，客户端是一个直爽的小伙子。小伙子跟姑娘说，“你今天真好看”，姑娘会回他，“MDZZ”。虽然姑娘回了MDZZ，但是她还是一直等着小伙子跟她说你今天真好看呢。（大雾）</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">hardware/interface/chase</div><div class="line"> - 1.0</div><div class="line">   - Android.bp</div><div class="line">   - IChase.hal</div><div class="line">   - default</div><div class="line">     - Android.bp</div><div class="line">     - IChase.cpp</div><div class="line">     - IChase.h</div><div class="line">   - vts</div><div class="line">     - Android.mk</div><div class="line">     - ServerGirl.cpp</div><div class="line">     - ClientBoy.cpp</div><div class="line"> - Android.bp</div></pre></td></tr></table></figure><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><h4 id="IChase-hal和Android-bp"><a href="#IChase-hal和Android-bp" class="headerlink" title="IChase.hal和Android.bp"></a>IChase.hal和Android.bp</h4><p>在<code>hardware/interface</code>下创建<code>chase</code>目录，我们的代码全放在此处。</p><p>创建<code>1.0</code>目录，放该接口1.0版本的内容，编写IChase.hal，定义接口。</p><p>-&gt; IChase.hal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> android.hardware.chase@<span class="number">1.0</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IChase</span></span>&#123;</div><div class="line">reply(string data) generates (string ret);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>编写<code>chase</code>目录下<code>Android.bp</code>，描述该模块的编译路径。</p><p>-&gt; Android.bp</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">subdirs = [ </div><div class="line">    "1.0",</div><div class="line">    "1.0/default",</div><div class="line">]</div></pre></td></tr></table></figure><h4 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h4><p>在aosp根目录下执行如下命令，生成相应的文件。</p><p>生成1.0目录下的Android.bp，在编译时，自动封装生成原binder相关的代码，生成基本的<code>.so</code>库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hidl-gen -o hardware/interfaces/chase/1.0/default/ -Landroidbp -randroid.hardware:hardware/interfaces -randroid.hidl:system/libhidl/transport android.hardware.chase@1.0</div></pre></td></tr></table></figure><p>生成Chase.cpp和Chase.h，server端具体的接口实现在此处开发。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hidl-gen -o hardware/interfaces/chase/1.0/default/ -Lc++-impl -randroid.hardware:hardware/interfaces -randroid.hidl:system/libhidl/transport android.hardware.chase@1.0</div></pre></td></tr></table></figure><p>生成default下的Android.bp，在编译时，根据Chase.h生成.so库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hidl-gen -o hardware/interfaces/chase/1.0/default/ -Landroidbp-impl -randroid.hardware:hardware/interfaces -randroid.hidl:system/libhidl/transport android.hardware.chase@1.0</div></pre></td></tr></table></figure><h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><p>由于前面生成文件的操作，Chase.cpp中的基本框架已经生成好，我们只用在定义的接口里加上相关逻辑即可。</p><p>这里特别说明一下数据结构的问题，<code>IChase.hal</code>文件中定义的<code>reply</code>接口，参数及返回值都是string，hidl中的string是特殊定义的数据类型，对应到C++中是<code>hidl_string</code>模板类，<code>hidl_string</code>是android8.0中新增的模板类，不能直接通过Return返回，于是增加了一个参数<code>&lt;interface_name&gt;_cb _hidl_cb</code>，用于实现接口返回值，其用法类似于函数指针，在接口实现内部直接将返回值作为参数填入<code>_hidl_cb</code>中即可。在客户端调用时，<code>_hidl_cb</code>参数就是一个返回值处理函数，所以在hidl中，这样的接口就可以实现多返回值。如果是一般的数据类型，比如double，生成的接口方法返回值处不再是<code>Return&lt;void&gt;</code>，而是<code>Return&lt;double&gt;</code>，逻辑代码中通过return语句返回，客户端直接用远程调用函数的返回值作为收到的服务端回复。</p><p>关于hidl与C++数据结构的对应以及更多内容可以参考<a href="https://source.android.com/devices/architecture/hidl-cpp/types" target="_blank" rel="external">官网</a>。</p><p>-&gt; Chase.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Chase.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOVE_WORDS <span class="meta-string">"you are so beautiful today!"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> android &#123;</div><div class="line"><span class="keyword">namespace</span> hardware &#123;</div><div class="line"><span class="keyword">namespace</span> chase &#123;</div><div class="line"><span class="keyword">namespace</span> V1_0 &#123;</div><div class="line"><span class="keyword">namespace</span> implementation &#123;</div><div class="line"></div><div class="line"><span class="comment">// Methods from ::android::hardware::chase::V1_0::IChase follow.</span></div><div class="line">Return&lt;<span class="keyword">void</span>&gt; Chase::reply(<span class="keyword">const</span> hidl_string&amp; data, reply_cb _hidl_cb) &#123;</div><div class="line">    <span class="comment">// TODO implement</span></div><div class="line"><span class="built_in">string</span> str;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"get string from ClientBoy: "</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">if</span>(data == LOVE_WORDS) &#123;</div><div class="line">    str = <span class="string">"MDZZ"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    str = <span class="string">"???"</span>;</div><div class="line">&#125;</div><div class="line">_hidl_cb(str);</div><div class="line">    <span class="keyword">return</span> Void();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Methods from ::android::hidl::base::V1_0::IBase follow.</span></div><div class="line"></div><div class="line"><span class="function">IChase* <span class="title">HIDL_FETCH_IChase</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* <span class="comment">/* name */</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Chase();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;  <span class="comment">// namespace implementation</span></div><div class="line">&#125;  <span class="comment">// namespace V1_0</span></div><div class="line">&#125;  <span class="comment">// namespace chase</span></div><div class="line">&#125;  <span class="comment">// namespace hardware</span></div><div class="line">&#125;  <span class="comment">// namespace android</span></div></pre></td></tr></table></figure><h3 id="server-amp-client"><a href="#server-amp-client" class="headerlink" title="server &amp; client"></a>server &amp; client</h3><p>server端通过直通的getService获取本地服务，调用<code>registerAsService</code>方法注册为服务端，调用<code>joinRpcThreadpool</code>加入线程池，等待客户端的通信。</p><p>-&gt; ServerGirl.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"chase"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;log/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/StrongPointer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hidl/LegacySupport.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/hardware/chase/1.0/IChase.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> android::sp;</div><div class="line"><span class="keyword">using</span> android::hardware::joinRpcThreadpool;</div><div class="line"><span class="keyword">using</span> android::hardware::configureRpcThreadpool;</div><div class="line"><span class="keyword">using</span> android::hardware::chase::V1_0::IChase;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> gServiceName[] = <span class="string">"android.hardware.IChase"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">configureRpcThreadpool(<span class="number">16</span>, <span class="literal">true</span> <span class="comment">/*  callerWillJoin*/</span>);</div><div class="line">sp&lt;IChase&gt; service = IChase::getService(gServiceName, <span class="literal">true</span>);</div><div class="line">service-&gt;registerAsService(gServiceName);</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"ServerGirl get ready!\n"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">joinRpcThreadpool();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>client端调用getService获取到server端的服务，远程调用server端的reply方法，实现通信。</p><p>-&gt; ClientBoy.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;log/log.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/StrongPointer.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/hardware/chase/1.0/IChase.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOVE_WORDS <span class="meta-string">"you are so beautiful today!"</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> android::sp;</div><div class="line"><span class="keyword">using</span> android::hardware::hidl_string;</div><div class="line"><span class="keyword">using</span> android::hardware::chase::V1_0::IChase;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> gServiceName[] = <span class="string">"android.hardware.IChase"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="built_in">string</span> love_words, reply;</div><div class="line">sp&lt;IChase&gt; service = IChase::getService(gServiceName);</div><div class="line"></div><div class="line">love_words = LOVE_WORDS;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"send love words to ServerGirl: "</span> &lt;&lt; love_words &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">service-&gt;reply(LOVE_WORDS, [&amp;] (<span class="keyword">const</span> hidl_string &amp;ret) &#123;</div><div class="line">    reply = ret; &#125;); </div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"get reply from ServerGirl: "</span> &lt;&lt; reply &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以注意到在server端和client端都是调用的同一个getService。<code>getService(string name, bool getStub)</code>中getStub如果为true，getService仅在直通模式下打开HAL；getStub如果为false或者缺省，getService会尝试找到Binder化的服务，如果没有找到，会尝试使用直通服务。server端getStub为true，直通模式下打开HAL，相当于本地调用。client端getStub缺省，会找到server端Binder化的服务，后续调用就是远程调用，从而实现通信。</p><p>通过Android.mk将client和server编译成两个bin文件。</p><p>-&gt; Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">LOCAL_PATH := <span class="variable">$(call my-dir)</span></div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := ServerGirl</div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">LOCAL_SRC_FILES := ServerGirl.cpp</div><div class="line">LOCAL_SHARED_LIBRARIES := \</div><div class="line">    libhwbinder \</div><div class="line">    libhidlbase \</div><div class="line">    libhidltransport \</div><div class="line">    liblog \</div><div class="line">    libutils \</div><div class="line">    android.hardware.chase@1.0</div><div class="line">LOCAL_REQUIRED_MODULES := android.hardware.chase@1.0-impl</div><div class="line">include $(BUILD_EXECUTABLE)</div><div class="line"></div><div class="line">include $(CLEAR_VARS)</div><div class="line">LOCAL_MODULE := ClientBoy</div><div class="line">LOCAL_MODULE_TAGS := optional</div><div class="line">LOCAL_SRC_FILES := ClientBoy.cpp</div><div class="line">LOCAL_SHARED_LIBRARIES := \</div><div class="line">    libhwbinder \</div><div class="line">    libhidlbase \</div><div class="line">    libhidltransport \</div><div class="line">    liblog \</div><div class="line">    libutils \</div><div class="line">    android.hardware.chase@1.0</div><div class="line">LOCAL_REQUIRED_MODULES := android.hardware.chase@1.0-impl</div><div class="line">include $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><ol><li><p>启动服务端</p><img src="/2017/12/11/Hidl_in_C++/server1.png" alt="server1.png" title=""></li><li><p>客户端发消息，收到服务端回应</p><img src="/2017/12/11/Hidl_in_C++/client.png" alt="client.png" title=""></li><li><p>服务端收到客户端消息</p><img src="/2017/12/11/Hidl_in_C++/server2.png" alt="server2.png" title=""></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>感谢前辈们的资料！</p><h3 id="8-0之前的binder"><a href="#8-0之前的binder" class="headerlink" title="8.0之前的binder"></a>8.0之前的binder</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><a href="http://gityuan.com/2015/10/31/binder-prepare/" target="_blank" rel="external">Gityuan：Binder系列—开篇</a></p><p><a href="http://blog.csdn.net/universus/article/details/6211589" target="_blank" rel="external">Android Binder设计与实现 - 设计篇</a></p><p><a href="https://my.oschina.net/youranhongcha/blog?sort=time&amp;p=2&amp;temp=1506737360643" target="_blank" rel="external">红茶一杯话Binder</a></p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p><a href="http://light3moon.com/2015/01/28/Android%20Binder%20%E5%88%86%E6%9E%90%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%80%85[Parcel]" target="_blank" rel="external">Android Binder 分析——数据传递者（Parcel）</a></p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p><a href="https://github.com/yuanhuihui/BinderSample" target="_blank" rel="external">BinderSample</a></p><h3 id="8-0之后的hwbinder"><a href="#8-0之后的hwbinder" class="headerlink" title="8.0之后的hwbinder"></a>8.0之后的hwbinder</h3><p><a href="https://source.android.com/devices/architecture/hidl-cpp/" target="_blank" rel="external">HIDL C++</a></p><p><a href="https://source.android.com/devices/tech/vts/performance" target="_blank" rel="external">性能测试</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;binder是Android中重要的进程间通信（IPC）方式。&lt;/p&gt;
&lt;p&gt;在8.0之前，多进程间的通信底层广泛使用binder机制。其相
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>vim基础学习</title>
    <link href="http://yoursite.com/2017/04/05/vim%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/04/05/vim基础学习/</id>
    <published>2017-04-04T16:00:00.000Z</published>
    <updated>2017-12-18T15:52:46.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>简言之，vim就是一个编辑器。对于服务器开发来说，远程登录服务器，部署及紧急debug，都依赖于终端编辑器，所以emacs和vim，必学其一。<br>关于编辑器和vim的好处，各处说的太多，此处不过多赘述。对我而言，好处就是不卡，能折腾，还能向小妹妹装逼。更多相关请自行搜索或参考<a href="https://zh.wikipedia.org/wiki/Vim#2" target="_blank" rel="external">vim</a>的维基百科。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>ubuntu：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim</div></pre></td></tr></table></figure><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>vim自带一份很好的快速入门指南，指南建议靠多用来记忆，不建议直接背，毕竟好用用好才是根本。在终端输入以下命令就可以开始跟着学习了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vimtutor [language]</div></pre></td></tr></table></figure><p>语言默认为系统语言，如果需要指定中文，language可填zh。其版本路径为<code>/usr/share/vim/vim74/tutor</code>。vim74可能因为版本不同而不同。</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>此处记录各讲小结，方便回忆和查阅。</p><h3 id="第一讲小结"><a href="#第一讲小结" class="headerlink" title="第一讲小结"></a>第一讲小结</h3><ol><li>光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。<br>   h (左移)j (下行)k (上行)l (右移)</li><li>欲进入 Vim 编辑器(从命令行提示符)，请输入：<code>vim 文件名 &lt;回车&gt;</code></li><li>欲退出 Vim 编辑器，请输入 <code>&lt;ESC&gt;   :q!   &lt;回车&gt;</code> 放弃所有改动。或者输入 <code>&lt;ESC&gt;   :wq   &lt;回车&gt;</code> 保存改动。</li><li>在正常模式下删除光标所在位置的字符，请按： <code>x</code></li><li>欲插入或添加文本，请输入：<br><code>i   输入欲插入文本   &lt;ESC&gt;</code>   在光标前插入文本<br><code>A   输入欲添加文本   &lt;ESC&gt;</code>   在一行后添加文本</li></ol><p>特别提示：按下<code>&lt;ESC&gt;</code>键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。</p><h3 id="第二讲小结"><a href="#第二讲小结" class="headerlink" title="第二讲小结"></a>第二讲小结</h3><ol><li>欲从当前光标删除至下一个单词，请输入：<code>dw</code></li><li>欲从当前光标删除至当前行末尾，请输入：<code>d$</code></li><li>欲删除整行，请输入：<code>dd</code></li><li>欲重复一个动作，请在它前面加上一个数字：<code>2w</code></li><li>在正常模式下修改命令的格式是：<br><code>operator   [number]   motion</code><br>其中：<br>operator - 操作符，代表要做的事情，比如 d 代表删除<br>[number] - 可以附加的数字，代表动作重复的次数<br>motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等。</li><li>欲移动光标到行首，请按数字0键：<code>0</code></li><li>欲撤消以前的操作，请输入：<code>u</code>(小写的u)<br>欲撤消在一行中所做的改动，请输入：<code>U</code> (大写的U)<br>欲撤消以前的撤消命令，恢复以前的操作结果，请输入：<code>CTRL-R</code></li></ol><h3 id="第三讲小结"><a href="#第三讲小结" class="headerlink" title="第三讲小结"></a>第三讲小结</h3><ol><li>要重新置入已经删除的文本内容，请按小写字母 <code>p</code> 键。该操作可以将已删除的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置于当前光标所在行的下一行。</li><li>要替换光标所在位置的字符，请输入小写的 <code>r</code> 和要替换掉原位置字符的新字符即可。</li><li>更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。比如输入 <code>ce</code> 可以替换当前光标到单词的末尾的内容；输入 <code>c$</code> 可以替换当前光标到行末的内容。</li><li>更改类命令的格式是：<br><code>c   [number]   motion</code></li></ol><h3 id="第四讲小结"><a href="#第四讲小结" class="headerlink" title="第四讲小结"></a>第四讲小结</h3><ol><li><code>CTRL-G</code> 用于显示当前光标所在位置和文件状态信息。<br><code>G</code> 用于将光标跳转至文件最后一行。<br>先敲入一个行号然后输入大写 <code>G</code> 则是将光标移动至该行号代表的行。<br><code>gg</code> 用于将光标跳转至文件第一行。</li><li>输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。<br>输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。<br>完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查<br>找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。<br>CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。</li><li>如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。</li><li>在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new<br>在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g<br>在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g<br>在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g<br>进行全文替换时询问用户确认每个替换需添加 c 标志 :%s/old/new/gc</li></ol><h3 id="第五讲小结"><a href="#第五讲小结" class="headerlink" title="第五讲小结"></a>第五讲小结</h3><ol><li><p><code>:!command</code> 用于执行一个外部命令 command。<br>请看一些实际例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(MS-DOS)      (Unix)</div><div class="line">:!dir      :!ls       -  用于显示当前目录的内容。</div><div class="line">:!del FILENAME    :!rm FILENAME    -  用于删除名为 FILENAME 的文件。</div></pre></td></tr></table></figure></li><li><p><code>:w FILENAME</code>  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文件中。</p></li><li><code>v motion</code> <code>:w FILENAME</code> 可将当前编辑文件中可视模式下选中的内容保存到文件FILENAME 中。</li><li><code>:r FILENAME</code> 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置后面。</li><li><code>:r !dir</code> 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</li></ol><h3 id="第六讲小结"><a href="#第六讲小结" class="headerlink" title="第六讲小结"></a>第六讲小结</h3><ol><li>输入小写的 O 可以在光标下方打开新的一行并进入插入模式。<br>输入大写的 o 可以在光标上方打开新的一行。</li><li>输入小写的 A 可以在光标所在位置之后插入文本。<br>输入大写的 a 可以在光标所在行的行末之后插入文本。</li><li>E 命令可以使光标移动到单词末尾。</li><li>操作符 Y 复制文本，P 粘贴先前复制的文本。</li><li>输入大写的 r 将进入替换模式，直至按 <esc> 键回到正常模式。</esc></li><li>输入 :SET XXX 可以设置 XXX 选项。一些有用的选项如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'IC'</span> <span class="string">'IGNORECASE'</span>      查找时忽略字母大小写</div><div class="line"><span class="string">'IS'</span> <span class="string">'INCSEARCH'</span>       查找短语时显示部分匹配</div><div class="line"><span class="string">'HLS'</span> <span class="string">'HLSEARCH'</span>       高亮显示所有的匹配短语</div></pre></td></tr></table></figure></li></ol><p>选项名可以用完整版本，也可以用缩略版本。</p><ol><li>在选项前加上 NO 可以关闭选项：  <code>:SET NOIC</code></li></ol><h3 id="第七讲小结"><a href="#第七讲小结" class="headerlink" title="第七讲小结"></a>第七讲小结</h3><ol><li>输入 <code>:help</code> 或者按 <code>&lt;F1&gt;</code> 键或 <code>&lt;Help&gt;</code> 键可以打开帮助窗口。</li><li>输入 <code>:help cmd</code> 可以找到关于 cmd 命令的帮助。</li><li>输入 <code>CTRL-W</code> CTRL-W  可以使您在窗口之间跳转。</li><li>输入 <code>:q</code> 以关闭帮助窗口</li><li>您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。</li><li>当输入 : 命令时，按 <code>CTRL-D</code> 可以查看可能的补全结果。<br>按 <tab> 可以使用一个补全。</tab></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开篇&quot;&gt;&lt;a href=&quot;#开篇&quot; class=&quot;headerlink&quot; title=&quot;开篇&quot;&gt;&lt;/a&gt;开篇&lt;/h2&gt;&lt;p&gt;简言之，vim就是一个编辑器。对于服务器开发来说，远程登录服务器，部署及紧急debug，都依赖于终端编辑器，所以emacs和vim，必学其一
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
</feed>
